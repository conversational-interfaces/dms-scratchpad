
once {
    // size of each agent (0.0 - 1.0)
    BLOCK_SIZE = 0.5
    
    // we have two agents, one chases the other -
    // notice their opposite distance preferences
    agents = [
        {
            pos2d: [1, 5],
            preferences: [
                // prefer 0 over 10
                [{distance: 0}, {distance: 10}]
            ],
            speed: 0.9,
            color: "#aa3a3a60"  // red
        },
        {
            pos2d: [5, 5],
            preferences: [
                // prefer 10 over 0
                [{distance: 10}, {distance: 0}]
            ],
            speed: 1,
            color: "#04aaaa60"  // blue
        }
    ]
    
    // represents the current agent
    agent_idx = 0
    
    // helper function to compute absolute value
    def abs(x) {
        if x < 0 {
            pop -1 * x
        }
        else {
            pop x
        }
    }
    
    // helper function to compute distance between points
    def compute_dist(p1, p2) {
        pop abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])
    }
}

// get current agent's position
x, y = agents[agent_idx]["pos2d"]

// let the agent decide an optimal action
#{depth: 1, model: agents[agent_idx]["preferences"]}
fork {
    x > BLOCK_SIZE * agents[agent_idx]["speed"] {
        // walk left
        x = x - BLOCK_SIZE * agents[agent_idx]["speed"]
    }
    x < 10 - BLOCK_SIZE {
        // walk right
        x = x + BLOCK_SIZE * agents[agent_idx]["speed"]
    }
    y > BLOCK_SIZE * agents[agent_idx]["speed"] {
        // walk up
        y = y - BLOCK_SIZE * agents[agent_idx]["speed"]
    }
    y < 10 - BLOCK_SIZE {
        // walk down
        y = y + BLOCK_SIZE * agents[agent_idx]["speed"]
    }
}

// render the agent on the canvas
act {
    object: "box",
    action: "draw",
    params: {
        color: agents[agent_idx]["color"],
        pos2d: [x, y],
        size: BLOCK_SIZE
    }
}

// update the agent positions
agents = edit(agents, 
    edit(agents[agent_idx], [x, y], "pos2d"), 
    agent_idx)
    
// update the distance
distance = compute_dist(agents[0]["pos2d"], agents[1]["pos2d"])

// cycle through agents
agent_idx = (agent_idx + 1) % len(agents)

